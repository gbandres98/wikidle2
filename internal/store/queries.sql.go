// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package store

import (
	"context"
	"database/sql"
	"encoding/json"
)

const addArticleToQueue = `-- name: AddArticleToQueue :exec
INSERT INTO article_queue (title)
VALUES ($1)
`

func (q *Queries) AddArticleToQueue(ctx context.Context, title string) error {
	_, err := q.db.ExecContext(ctx, addArticleToQueue, title)
	return err
}

const deleteQueueArticle = `-- name: DeleteQueueArticle :exec
DELETE FROM article_queue
WHERE id = $1
`

func (q *Queries) DeleteQueueArticle(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteQueueArticle, id)
	return err
}

const getArticleByID = `-- name: GetArticleByID :one
SELECT id, content, title FROM article 
WHERE id = $1
`

func (q *Queries) GetArticleByID(ctx context.Context, id string) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticleByID, id)
	var i Article
	err := row.Scan(&i.ID, &i.Content, &i.Title)
	return i, err
}

const getGameCountByGameID = `-- name: GetGameCountByGameID :one
SELECT COUNT(*) FROM game
WHERE game_id = $1
`

func (q *Queries) GetGameCountByGameID(ctx context.Context, gameID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getGameCountByGameID, gameID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getQueueArticle = `-- name: GetQueueArticle :one
SELECT id, title, ondate FROM article_queue
WHERE onDate IS NULL
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetQueueArticle(ctx context.Context) (ArticleQueue, error) {
	row := q.db.QueryRowContext(ctx, getQueueArticle)
	var i ArticleQueue
	err := row.Scan(&i.ID, &i.Title, &i.Ondate)
	return i, err
}

const getQueueArticleByDate = `-- name: GetQueueArticleByDate :one
SELECT id, title, ondate FROM article_queue
WHERE onDate = $1
`

func (q *Queries) GetQueueArticleByDate(ctx context.Context, ondate sql.NullString) (ArticleQueue, error) {
	row := q.db.QueryRowContext(ctx, getQueueArticleByDate, ondate)
	var i ArticleQueue
	err := row.Scan(&i.ID, &i.Title, &i.Ondate)
	return i, err
}

const getWinCountByGameID = `-- name: GetWinCountByGameID :one
select COUNT(*) from game 
where game_id = $1 
and game_data->>'w' = 'true'
`

func (q *Queries) GetWinCountByGameID(ctx context.Context, gameID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getWinCountByGameID, gameID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const saveArticle = `-- name: SaveArticle :exec
INSERT INTO article (id, content, title)
VALUES ($1, $2, $3)
ON CONFLICT (id) DO UPDATE SET content = $2, title = $3
`

type SaveArticleParams struct {
	ID      string
	Content json.RawMessage
	Title   string
}

func (q *Queries) SaveArticle(ctx context.Context, arg SaveArticleParams) error {
	_, err := q.db.ExecContext(ctx, saveArticle, arg.ID, arg.Content, arg.Title)
	return err
}

const saveGame = `-- name: SaveGame :exec
INSERT INTO game (player_id, game_id, game_data)
VALUES ($1, $2, $3)
ON CONFLICT (player_id, game_id) DO UPDATE SET game_data = $3
`

type SaveGameParams struct {
	PlayerID string
	GameID   string
	GameData json.RawMessage
}

func (q *Queries) SaveGame(ctx context.Context, arg SaveGameParams) error {
	_, err := q.db.ExecContext(ctx, saveGame, arg.PlayerID, arg.GameID, arg.GameData)
	return err
}
